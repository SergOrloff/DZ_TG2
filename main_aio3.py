import os
import logging
from aiogram import Bot, Dispatcher, types, Router, F
from aiogram.types import ReplyKeyboardMarkup, KeyboardButton, InlineKeyboardMarkup, ReplyKeyboardRemove, InlineKeyboardButton, FSInputFile
from aiogram.filters import Command
from aiogram.types import CallbackQuery, Message
from dotenv import load_dotenv
from aiogram.fsm.storage.memory import MemoryStorage
from aiogram.client.session.aiohttp import AiohttpSession
from googletrans import Translator
from gtts import gTTS

# –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è –∏–∑ —Ñ–∞–π–ª–∞ .env
load_dotenv()

# –ü–æ–ª—É—á–∞–µ–º –∑–Ω–∞—á–µ–Ω–∏—è –∏–∑ .env —Ñ–∞–π–ª–∞
API_TOKEN = os.getenv('TELEGRAM_TOKEN')

# –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ —É—Ä–æ–≤–µ–Ω—å –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO)

# –¢–æ–∫–µ–Ω –≤–∞—à–µ–≥–æ –±–æ—Ç–∞
# API_TOKEN = 'YOUR_BOT_TOKEN'

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞ –∏ –¥–∏—Å–ø–µ—Ç—á–µ—Ä–∞
session = AiohttpSession()
bot = Bot(token=API_TOKEN, session=session)
# –°–æ–∑–¥–∞–µ–º —Ä–æ—É—Ç–µ—Ä
router = Router()

# –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞ –¥–ª—è callback_query
@router.callback_query(F.data.startswith('lang_'))
async def process_callback_query(callback_query: CallbackQuery):
    await callback_query.answer()
    await callback_query.message.answer(f"You selected {callback_query.data}")

storage = MemoryStorage()
dp = Dispatcher(storage=storage)
dp.include_router(router)

# –°–æ–∑–¥–∞–µ–º –ø–∞–ø–∫–∏, –µ—Å–ª–∏ –æ–Ω–∏ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É—é—Ç
os.makedirs('img', exist_ok=True)
os.makedirs('voice', exist_ok=True)

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø–µ—Ä–µ–≤–æ–¥—á–∏–∫–∞
translator = Translator()

# –°–ª–æ–≤–∞—Ä—å –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ —è–∑—ã–∫–∞ –∫–∞–∂–¥–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
user_language = {}

# –°—á–µ—Ç—á–∏–∫–∏ –¥–ª—è –∏–º–µ–Ω —Ñ–∞–π–ª–æ–≤
photo_counter = {}
voice_counter = {}

# –°–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —è–∑—ã–∫–æ–≤
available_languages = {
    'en': '–ê–Ω–≥–ª–∏–π—Å–∫–∏–π',
    'ru': '–†—É—Å—Å–∫–∏–π',
    'uk': '–£–∫—Ä–∞–∏–Ω—Å–∫–∏–π',
    'es': '–ò—Å–ø–∞–Ω—Å–∫–∏–π',
    'it': '–ò—Ç–∞–ª—å—è–Ω—Å–∫–∏–π',
    'de': '–ù–µ–º–µ—Ü–∫–∏–π',
    'fr': '–§—Ä–∞–Ω—Ü—É–∑—Å–∫–∏–π',
    'zh-TW': '–ö–∏—Ç–∞–π—Å–∫–∏–π',
    'pt-PT': '–ü–æ—Ä—Ç—É–≥–∞–ª—å—Å–∫–∏–π',
    'tr': '–¢—É—Ä–µ—Ü–∫–∏–π',
    'fi': '–§–∏–Ω—Å–∫–∏–π',
    'uz': '–£–∑–±–µ–∫—Å–∫–∏–π',
    'ja': '–Ø–ø–æ–Ω—Å–∫–∏–π',
    # –î–æ–±–∞–≤—å—Ç–µ –¥—Ä—É–≥–∏–µ —è–∑—ã–∫–∏ –ø–æ –∂–µ–ª–∞–Ω–∏—é
}


# –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–Ω–æ–ø–∫–∞–º–∏

keyboard = ReplyKeyboardMarkup(
    keyboard=[
        [
            KeyboardButton(text='üì∑ –ó–∞–≥—Ä—É–∑–∏—Ç—å —Ñ–æ—Ç–æ', callback_data="photo"),
            KeyboardButton(text='üî§ –ü–µ—Ä–µ–≤–µ—Å—Ç–∏ —Ç–µ–∫—Å—Ç', callback_data="text")
        ],
        [
            KeyboardButton(text='üåê –í—ã–±—Ä–∞—Ç—å —è–∑—ã–∫', callback_data="text"),
            KeyboardButton(text='üÜò –ü–æ–º–æ—â—å')
        ]
    ],
    resize_keyboard=True
)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start
@dp.message(Command('start'))
async def send_welcome(message: types.Message):
    user_language[message.from_user.id] = 'en'  # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∞–Ω–≥–ª–∏–π—Å–∫–∏–π –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
    await message.answer(
        "–ü—Ä–∏–≤–µ—Ç! –Ø –º–æ–≥—É —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –≤–∞—à–µ —Ñ–æ—Ç–æ –∏ –ø–µ—Ä–µ–≤–µ—Å—Ç–∏ —Ç–µ–∫—Å—Ç –Ω–∞ –≤—ã–±—Ä–∞–Ω–Ω—ã–π –≤–∞–º–∏ —è–∑—ã–∫ —Å –≥–æ–ª–æ—Å–æ–≤—ã–º –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏–µ–º.",
        reply_markup=keyboard  # –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ keyboard –æ–ø—Ä–µ–¥–µ–ª–µ–Ω
    )

    try:
# –°–æ–∑–¥–∞—ë–º –≥–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        tts = gTTS(text="–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ! –Ø –≤–∞—à –±–æ—Ç-–ø–æ–º–æ—â–Ω–∏–∫.", lang='ru')
        tts.save("voice_message.ogg")

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≥–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        voice = FSInputFile("voice_message.ogg")
        await bot.send_voice(chat_id=message.chat.id, voice=voice)
        # with open("voice_message.ogg", 'rb') as voice:
        #     await message.answer_voice(voice)
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞: {e}")
    finally:
        # –£–¥–∞–ª—è–µ–º —Ñ–∞–π–ª –≥–æ–ª–æ—Å–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
        if os.path.exists("voice_message.ogg"):
            os.remove("voice_message.ogg")


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /help
@dp.message(Command('help'))
async def send_help(message: types.Message):
    help_text = (
        "üÜò *–°–ø—Ä–∞–≤–∫–∞ –ø–æ –±–æ—Ç—É:*\n\n"
        "‚Ä¢ –ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É üì∑ *–ó–∞–≥—Ä—É–∑–∏—Ç—å —Ñ–æ—Ç–æ*, —á—Ç–æ–±—ã –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Ñ–æ—Ç–æ –∏ —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –µ–≥–æ.\n"
        "‚Ä¢ –ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É üî§ *–ü–µ—Ä–µ–≤–µ—Å—Ç–∏ —Ç–µ–∫—Å—Ç*, —á—Ç–æ–±—ã –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Ç–µ–∫—Å—Ç –¥–ª—è –ø–µ—Ä–µ–≤–æ–¥–∞ –Ω–∞ –≤—ã–±—Ä–∞–Ω–Ω—ã–π —è–∑—ã–∫ —Å –≥–æ–ª–æ—Å–æ–≤—ã–º "
        "–¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏–µ–º.\n"
        "‚Ä¢ –ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É üåê *–í—ã–±—Ä–∞—Ç—å —è–∑—ã–∫*, —á—Ç–æ–±—ã –∏–∑–º–µ–Ω–∏—Ç—å —è–∑—ã–∫ –ø–µ—Ä–µ–≤–æ–¥–∞.\n"
        "‚Ä¢ –ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É üÜò *–ü–æ–º–æ—â—å*, —á—Ç–æ–±—ã —É–≤–∏–¥–µ—Ç—å —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ.\n"
        "‚Ä¢ –í—ã —Ç–∞–∫–∂–µ –º–æ–∂–µ—Ç–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –∫–æ–º–∞–Ω–¥—ã:\n"
        "  - /start - –Ω–∞—á–∞—Ç—å —Ä–∞–±–æ—Ç—É —Å –±–æ—Ç–æ–º.\n"
        "  - /help - –ø–æ–∫–∞–∑–∞—Ç—å —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–º–æ—â–∏.\n"
    )
    await message.reply(help_text, parse_mode='Markdown', reply_markup=keyboard)


# –•–µ–Ω–¥–ª–µ—Ä –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –Ω–∞–∂–∞—Ç–∏—è –Ω–∞ –∫–Ω–æ–ø–∫—É 'üì∑ –ó–∞–≥—Ä—É–∑–∏—Ç—å —Ñ–æ—Ç–æ'
@dp.message(lambda message: message.text == 'üì∑ –ó–∞–≥—Ä—É–∑–∏—Ç—å —Ñ–æ—Ç–æ')
async def handle_upload_photo(message: types.Message):
    await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ, –∫–æ—Ç–æ—Ä–æ–µ –≤—ã —Ö–æ—Ç–∏—Ç–µ –∑–∞–≥—Ä—É–∑–∏—Ç—å.")


# –•–µ–Ω–¥–ª–µ—Ä –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –Ω–∞–∂–∞—Ç–∏—è –Ω–∞ –∫–Ω–æ–ø–∫—É 'üî§ –ü–µ—Ä–µ–≤–µ—Å—Ç–∏ —Ç–µ–∫—Å—Ç'
@dp.message(lambda message: message.text == 'üî§ –ü–µ—Ä–µ–≤–µ—Å—Ç–∏ —Ç–µ–∫—Å—Ç')
async def handle_translate_text(message: types.Message):
    await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Ç–µ–∫—Å—Ç, –∫–æ—Ç–æ—Ä—ã–π –≤—ã —Ö–æ—Ç–∏—Ç–µ –ø–µ—Ä–µ–≤–µ—Å—Ç–∏.")


# # –•–µ–Ω–¥–ª–µ—Ä –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –Ω–∞–∂–∞—Ç–∏—è –Ω–∞ –∫–Ω–æ–ø–∫—É 'üåê –í—ã–±—Ä–∞—Ç—å —è–∑—ã–∫'
@dp.message(lambda message: message.text == 'üåê –í—ã–±—Ä–∞—Ç—å —è–∑—ã–∫')
async def handle_select_language(message: types.Message):
    buttons = [
        InlineKeyboardButton(text=lang_name, callback_data=lang_code)
        for lang_code, lang_name in available_languages.items()
    ]
    # –ï—Å–ª–∏ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–Ω–æ–ø–æ–∫ –Ω–µ—á–µ—Ç–Ω–æ–µ, –¥–æ–±–∞–≤–ª—è–µ–º –ø–æ—Å–ª–µ–¥–Ω—é—é –∫–Ω–æ–ø–∫—É –æ—Ç–¥–µ–ª—å–Ω–æ
    if len(buttons) % 2 != 0:
        # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–Ω–æ–ø–∫–∞–º–∏ –≤ –¥–≤–∞ —Å—Ç–æ–ª–±–∏–∫–∞
        inline_kb = InlineKeyboardMarkup(inline_keyboard=[
            [buttons[i], buttons[i + 1]] for i in range(0, len(buttons) - 1, 2)
        ])
        inline_kb.inline_keyboard.append([buttons[-1]])
    elif len(buttons) % 2 == 0:
        # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–Ω–æ–ø–∫–∞–º–∏ –≤ –¥–≤–∞ —Å—Ç–æ–ª–±–∏–∫–∞
        inline_kb = InlineKeyboardMarkup(inline_keyboard=[
            [buttons[i], buttons[i + 1]] for i in range(0, len(buttons), 2)
        ])
    await message.reply("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ —è–∑—ã–∫ –¥–ª—è –ø–µ—Ä–µ–≤–æ–¥–∞:", reply_markup=inline_kb)


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞–∂–∞—Ç–∏—è –Ω–∞ –∫–Ω–æ–ø–∫–∏ –≤—ã–±–æ—Ä–∞ —è–∑—ã–∫–∞
@dp.callback_query(lambda c: c.data in available_languages.keys())
# @dp.callback_query(lambda c: c.data.startswith('lang_'))
async def process_language_selection(callback_query: types.CallbackQuery):
    lang_code = callback_query.data  # –ò–∑–≤–ª–µ–∫–∞–µ–º –∫–æ–¥ —è–∑—ã–∫–∞
    # print(lang_code)
    user_language[callback_query.from_user.id] = lang_code  # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤—ã–±—Ä–∞–Ω–Ω—ã–π —è–∑—ã–∫
    # print(user_language[callback_query.from_user.id])
    # –£–≤–µ–¥–æ–º–ª—è–µ–º Telegram, —á—Ç–æ –∑–∞–ø—Ä–æ—Å –±—ã–ª –æ–±—Ä–∞–±–æ—Ç–∞–Ω
    await bot.answer_callback_query(callback_query.id)
    lang_name = available_languages[callback_query.data]
    # print(lang_name)
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
    await bot.send_message(callback_query.from_user.id, f"–í—ã –≤—ã–±—Ä–∞–ª–∏ —è–∑—ã–∫: {lang_name}", reply_markup=keyboard)


# –•–µ–Ω–¥–ª–µ—Ä –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –Ω–∞–∂–∞—Ç–∏—è –Ω–∞ –∫–Ω–æ–ø–∫—É 'üÜò –ü–æ–º–æ—â—å'
@dp.message(lambda message: message.text == 'üÜò –ü–æ–º–æ—â—å')
async def send_help(message: types.Message):
    help_text = (
        "üÜò *–°–ø—Ä–∞–≤–∫–∞ –ø–æ –±–æ—Ç—É:*\n\n"
        "‚Ä¢ –ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É üì∑ *–ó–∞–≥—Ä—É–∑–∏—Ç—å —Ñ–æ—Ç–æ*, —á—Ç–æ–±—ã –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Ñ–æ—Ç–æ –∏ —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –µ–≥–æ.\n"
        "‚Ä¢ –ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É üî§ *–ü–µ—Ä–µ–≤–µ—Å—Ç–∏ —Ç–µ–∫—Å—Ç*, —á—Ç–æ–±—ã –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Ç–µ–∫—Å—Ç –¥–ª—è –ø–µ—Ä–µ–≤–æ–¥–∞ –Ω–∞ –≤—ã–±—Ä–∞–Ω–Ω—ã–π —è–∑—ã–∫ —Å –≥–æ–ª–æ—Å–æ–≤—ã–º "
        "–¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏–µ–º.\n"
        "‚Ä¢ –ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É üåê *–í—ã–±—Ä–∞—Ç—å —è–∑—ã–∫*, —á—Ç–æ–±—ã –∏–∑–º–µ–Ω–∏—Ç—å —è–∑—ã–∫ –ø–µ—Ä–µ–≤–æ–¥–∞.\n"
        "‚Ä¢ –ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É üÜò *–ü–æ–º–æ—â—å*, —á—Ç–æ–±—ã —É–≤–∏–¥–µ—Ç—å —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ.\n"
        "‚Ä¢ –í—ã —Ç–∞–∫–∂–µ –º–æ–∂–µ—Ç–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –∫–æ–º–∞–Ω–¥—ã:\n"
        "  - /start - –Ω–∞—á–∞—Ç—å —Ä–∞–±–æ—Ç—É —Å –±–æ—Ç–æ–º.\n"
        "  - /help - –ø–æ–∫–∞–∑–∞—Ç—å —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–º–æ—â–∏.\n"
    )
    await message.reply(help_text, parse_mode='Markdown', reply_markup=keyboard)


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ñ–æ—Ç–æ —Å –±–æ–ª–µ–µ –∫–æ—Ä–æ—Ç–∫–∏–º –∏–º–µ–Ω–µ–º —Ñ–∞–π–ª–∞
@router.message(F.photo)
async def handle_photo(message: types.Message):
    user_id = message.from_user.id
    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º —Å—á–µ—Ç—á–∏–∫ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –µ—Å–ª–∏ –µ–≥–æ –µ—â–µ –Ω–µ—Ç
    if user_id not in photo_counter:
        photo_counter[user_id] = 1
    else:
        photo_counter[user_id] += 1

    photo = message.photo[-1]
    file_id = photo.file_id
    file = await bot.get_file(file_id)
    file_path = file.file_path
    downloaded_file = await bot.download_file(file_path)
    # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –±–æ–ª–µ–µ –∫–æ—Ä–æ—Ç–∫–æ–µ –∏–º—è —Ñ–∞–π–ª–∞
    file_name = f'img/photo_{user_id}_{photo_counter[user_id]}.jpg'
    with open(file_name, 'wb') as f:
        f.write(downloaded_file.read())
    await message.reply("–§–æ—Ç–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ!", reply_markup=keyboard)


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π —Å –≥–æ–ª–æ—Å–æ–≤—ã–º –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏–µ–º
@router.message(F.text)
async def handle_text(message: Message):
    text = message.text
    if text in ['üì∑ –ó–∞–≥—Ä—É–∑–∏—Ç—å —Ñ–æ—Ç–æ', 'üî§ –ü–µ—Ä–µ–≤–µ—Å—Ç–∏ —Ç–µ–∫—Å—Ç', 'üÜò –ü–æ–º–æ—â—å', 'üåê –í—ã–±—Ä–∞—Ç—å —è–∑—ã–∫']:
        # –ï—Å–ª–∏ —ç—Ç–æ —Ç–µ–∫—Å—Ç –∫–Ω–æ–ø–æ–∫, –Ω–µ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –µ–≥–æ –∫–∞–∫ –æ–±—ã—á–Ω—ã–π —Ç–µ–∫—Å—Ç
        return
    user_id = message.from_user.id
    target_lang = user_language.get(user_id, 'en')  # –ü–æ–ª—É—á–∞–µ–º –≤—ã–±—Ä–∞–Ω–Ω—ã–π —è–∑—ã–∫, –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é –∞–Ω–≥–ª–∏–π—Å–∫–∏–π
    print(target_lang)
    # –ü–µ—Ä–µ–≤–æ–¥–∏–º —Ç–µ–∫—Å—Ç –Ω–∞ –≤—ã–±—Ä–∞–Ω–Ω—ã–π —è–∑—ã–∫
    try:
        translated = translator.translate(text, dest=target_lang)
    except Exception as e:
        await message.reply("–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–µ—Ä–µ–≤–æ–¥–µ —Ç–µ–∫—Å—Ç–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.")
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–µ—Ä–µ–≤–æ–¥–µ: {e}")
        return
    translated_text = translated.text
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç–µ–∫—Å—Ç–æ–≤—ã–π –ø–µ—Ä–µ–≤–æ–¥
    await message.reply(
        f"–ü–µ—Ä–µ–≤–æ–¥ –Ω–∞ {available_languages.get(target_lang, '–≤—ã–±—Ä–∞–Ω–Ω—ã–π —è–∑—ã–∫')}:\n{translated_text}",
        reply_markup=keyboard
    )
    # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –≥–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –ø–µ—Ä–µ–≤–µ–¥–µ–Ω–Ω—ã–º —Ç–µ–∫—Å—Ç–æ–º
    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º —Å—á–µ—Ç—á–∏–∫ –¥–ª—è –≥–æ–ª–æ—Å–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
    if user_id not in voice_counter:
        voice_counter[user_id] = 1
    else:
        voice_counter[user_id] += 1

    # –†–∞–∑–±–∏–≤–∞–µ–º —Ç–µ–∫—Å—Ç –Ω–∞ —á–∞—Å—Ç–∏ –ø–æ 300 —Å–∏–º–≤–æ–ª–æ–≤
    max_length = 300
    text_parts = [translated_text[i:i + max_length] for i in range(0, len(translated_text), max_length)]

    for index, part in enumerate(text_parts):
        # –°–æ–∑–¥–∞–µ–º –≥–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –∫–∞–∂–¥–æ–π —á–∞—Å—Ç–∏
        try:
            tts = gTTS(text=part, lang=target_lang)
        except Exception as e:
            await message.reply("–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –≥–æ–ª–æ—Å–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.")
            logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –≥–æ–ª–æ—Å–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")
            return
        voice_file_name = f'voice/voice_{user_id}_{voice_counter[user_id]}_{index}.ogg'
        tts.save(voice_file_name)
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≥–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        voice = FSInputFile(voice_file_name)
        await bot.send_audio(message.chat.id, voice)
        # –£–¥–∞–ª—è–µ–º —Ñ–∞–π–ª –ø–æ—Å–ª–µ –æ—Ç–ø—Ä–∞–≤–∫–∏
        os.remove(voice_file_name)
    # –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º —Å—á–µ—Ç—á–∏–∫ –≥–æ–ª–æ—Å–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
    voice_counter[user_id] += len(text_parts) - 1  # –£–∂–µ —É–≤–µ–ª–∏—á–∏–ª–∏ –Ω–∞ 1 —Ä–∞–Ω–µ–µ


# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞
async def main():
    await dp.start_polling(bot)

if __name__ == '__main__':
    import asyncio
    asyncio.run(main())